"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @class EventEmitter
 *
 * Simple event emitter class
 */
var EventEmitter =
/*#__PURE__*/
function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);

    this.handlers = {};
  }

  _createClass(EventEmitter, [{
    key: "emit",
    value: function emit(eventName) {
      if (undefined === this.handlers[eventName]) {
        return;
      }

      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.handlers[eventName][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var handler = _step.value;
          handler.apply(void 0, params);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "addHandler",
    value: function addHandler(eventName, handler) {
      this.handlers[eventName] = undefined === this.handlers[eventName] ? [handler] : [].concat(_toConsumableArray(this.handlers[eventName]), [handler]);
    }
  }]);

  return EventEmitter;
}();
/**
 * @class Model
 *
 * Manages the data of the application.
 */


var Model =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Model, _EventEmitter);

  function Model() {
    var _this;

    _classCallCheck(this, Model);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Model).call(this));

    _defineProperty(_assertThisInitialized(_this), "todoListChangedEvent", function () {
      return 'todoListChanged';
    });

    _this.todos = JSON.parse(localStorage.getItem('todos')) || [];
    return _this;
  }

  _createClass(Model, [{
    key: "addTodo",
    value: function addTodo(todo) {
      this.todos = [].concat(_toConsumableArray(this.todos), [todo]);
      this.update();
      this.emit(this.todoListChangedEvent(), this.todos);
    }
  }, {
    key: "editTodo",
    value: function editTodo(id, updatedText) {
      this.todos = this.todos.map(function (todo) {
        return todo.id === id ? {
          id: todo.id,
          text: updatedText,
          complete: todo.complete
        } : todo;
      });
      this.update();
      this.emit(this.todoListChangedEvent(), this.todos);
    }
  }, {
    key: "deleteTodo",
    value: function deleteTodo(id) {
      this.todos = this.todos.filter(function (todo) {
        return todo.id !== id;
      });
      this.update();
      this.emit(this.todoListChangedEvent(), this.todos);
    }
  }, {
    key: "toggleTodo",
    value: function toggleTodo(id) {
      this.todos = this.todos.map(function (todo) {
        return todo.id === id ? {
          id: todo.id,
          text: todo.text,
          complete: !todo.complete
        } : todo;
      });
      this.update();
      this.emit(this.todoListChangedEvent(), this.todos);
    }
  }, {
    key: "update",
    value: function update() {
      localStorage.setItem('todos', JSON.stringify(this.todos));
    }
  }]);

  return Model;
}(EventEmitter);
/**
 * @class View
 *
 * Visual representation of the model.
 */


var View =
/*#__PURE__*/
function (_EventEmitter2) {
  _inherits(View, _EventEmitter2);

  function View() {
    var _this2;

    _classCallCheck(this, View);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this));

    _defineProperty(_assertThisInitialized(_this2), "addTodoEvent", function () {
      return 'addTodo';
    });

    _defineProperty(_assertThisInitialized(_this2), "deleteTodoEvent", function () {
      return 'deleteTodo';
    });

    _defineProperty(_assertThisInitialized(_this2), "editTodoEvent", function () {
      return 'editTodo';
    });

    _defineProperty(_assertThisInitialized(_this2), "editTodoCompleteEvent", function () {
      return 'editTodoComplete';
    });

    _defineProperty(_assertThisInitialized(_this2), "toggleEvent", function () {
      return 'toggle';
    });

    _this2.app = _this2.getElement('#root');
    _this2.form = _this2.createElement('form');
    _this2.input = _this2.createElement('input');
    _this2.input.type = 'text';
    _this2.input.placeholder = 'Add todo';
    _this2.input.name = 'todo';
    _this2.submitButton = _this2.createElement('button');
    _this2.submitButton.textContent = 'Submit';

    _this2.form.append(_this2.input, _this2.submitButton);

    _this2.title = _this2.createElement('h1');
    _this2.title.textContent = 'Todos';
    _this2.todoList = _this2.createElement('ul', 'todo-list');

    _this2.app.append(_this2.title, _this2.form, _this2.todoList);

    _this2.bindEvents();

    return _this2;
  }

  _createClass(View, [{
    key: "resetInput",
    value: function resetInput() {
      this.input.value = '';
    }
  }, {
    key: "createElement",
    value: function createElement(tag, className) {
      var element = document.createElement(tag);
      if (className) element.classList.add(className);
      return element;
    }
  }, {
    key: "getElement",
    value: function getElement(selector) {
      var element = document.querySelector(selector);
      return element;
    }
  }, {
    key: "displayTodos",
    value: function displayTodos(todos) {
      var _this3 = this;

      // Delete all nodes
      while (this.todoList.firstChild) {
        this.todoList.removeChild(this.todoList.firstChild);
      } // Show default message


      if (todos.length === 0) {
        var p = this.createElement('p');
        p.textContent = 'Nothing to do! Add a task?';
        this.todoList.append(p);
      } else {
        // Create nodes
        todos.forEach(function (todo) {
          var li = _this3.createElement('li');

          li.id = todo.id;

          var checkbox = _this3.createElement('input');

          checkbox.type = 'checkbox';
          checkbox.checked = todo.complete;

          var span = _this3.createElement('span');

          span.contentEditable = true;
          span.classList.add('editable');

          if (todo.complete) {
            var strike = _this3.createElement('s');

            strike.textContent = todo.text;
            span.append(strike);
          } else {
            span.textContent = todo.text;
          }

          var deleteButton = _this3.createElement('button', 'delete');

          deleteButton.textContent = 'Delete';
          li.append(checkbox, span, deleteButton); // Append nodes

          _this3.todoList.append(li);
        });
      }

      console.log(todos);
    }
  }, {
    key: "bindEvents",
    value: function bindEvents() {
      this.form.addEventListener('submit', this.emit.bind(this, this.addTodoEvent()));
      this.todoList.addEventListener('click', this.emit.bind(this, this.deleteTodoEvent()));
      this.todoList.addEventListener('input', this.emit.bind(this, this.editTodoEvent()));
      this.todoList.addEventListener('focusout', this.emit.bind(this, this.editTodoCompleteEvent()));
      this.todoList.addEventListener('change', this.emit.bind(this, this.toggleEvent()));
    }
  }, {
    key: "todoText",
    get: function get() {
      return this.input.value;
    }
  }]);

  return View;
}(EventEmitter);
/**
 * @class Controller
 *
 * Links the user and the system.
 */


var Controller = function Controller(model, view) {
  var _this4 = this;

  _classCallCheck(this, Controller);

  _defineProperty(this, "onTodoListChanged", function (todos) {
    _this4.view.displayTodos(todos);
  });

  _defineProperty(this, "handleAddTodo", function (event) {
    event.preventDefault();

    if (_this4.view.todoText) {
      var todo = {
        id: _this4.model.todos.length > 0 ? _this4.model.todos[_this4.model.todos.length - 1].id + 1 : 1,
        text: _this4.view.todoText,
        complete: false
      };

      _this4.model.addTodo(todo);

      _this4.view.resetInput();
    }
  });

  _defineProperty(this, "handleEditTodo", function (event) {
    if (event.target.className === 'editable') {
      _this4.temporaryEditValue = event.target.innerText;
    }
  });

  _defineProperty(this, "handleEditTodoComplete", function (event) {
    if (_this4.temporaryEditValue) {
      var id = parseInt(event.target.parentElement.id);

      _this4.model.editTodo(id, _this4.temporaryEditValue);

      _this4.temporaryEditValue = '';
    }
  });

  _defineProperty(this, "handleDeleteTodo", function (event) {
    if (event.target.className === 'delete') {
      var id = parseInt(event.target.parentElement.id);

      _this4.model.deleteTodo(id);
    }
  });

  _defineProperty(this, "handleToggle", function (event) {
    if (event.target.type === 'checkbox') {
      var id = parseInt(event.target.parentElement.id);

      _this4.model.toggleTodo(id);
    }
  });

  this.model = model;
  this.view = view;
  this.view.addHandler(this.view.addTodoEvent(), this.handleAddTodo);
  this.view.addHandler(this.view.deleteTodoEvent(), this.handleDeleteTodo);
  this.view.addHandler(this.view.editTodoEvent(), this.handleEditTodo);
  this.view.addHandler(this.view.editTodoCompleteEvent(), this.handleEditTodoComplete);
  this.view.addHandler(this.view.toggleEvent(), this.handleToggle);
  this.model.addHandler(this.model.todoListChangedEvent(), this.onTodoListChanged);
  this.temporaryEditValue; // Display initial todos

  this.onTodoListChanged(this.model.todos);
};

var app = new Controller(new Model(), new View());
